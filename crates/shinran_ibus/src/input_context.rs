//! # D-Bus interface proxy for: `org.freedesktop.IBus.InputContext`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `org.freedesktop.IBus.Portal.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.freedesktop.IBus.InputContext",
    assume_defaults = true
)]
trait InputContext {
    /// CancelHandWriting method
    fn cancel_hand_writing(&self, n_strokes: u32) -> zbus::Result<()>;

    /// FocusIn method
    fn focus_in(&self) -> zbus::Result<()>;

    /// FocusOut method
    fn focus_out(&self) -> zbus::Result<()>;

    /// GetEngine method
    fn get_engine(&self) -> zbus::Result<zbus::zvariant::OwnedValue>;

    /// ProcessHandWritingEvent method
    fn process_hand_writing_event(&self, coordinates: &[f64]) -> zbus::Result<()>;

    /// ProcessKeyEvent method
    fn process_key_event(&self, keyval: u32, keycode: u32, state: u32) -> zbus::Result<bool>;

    /// PropertyActivate method
    fn property_activate(&self, name: &str, state: u32) -> zbus::Result<()>;

    /// Reset method
    fn reset(&self) -> zbus::Result<()>;

    /// SetCapabilities method
    fn set_capabilities(&self, caps: u32) -> zbus::Result<()>;

    /// SetCursorLocation method
    fn set_cursor_location(&self, x: i32, y: i32, w: i32, h: i32) -> zbus::Result<()>;

    /// SetCursorLocationRelative method
    fn set_cursor_location_relative(&self, x: i32, y: i32, w: i32, h: i32) -> zbus::Result<()>;

    /// SetEngine method
    fn set_engine(&self, name: &str) -> zbus::Result<()>;

    /// SetSurroundingText method
    fn set_surrounding_text(
        &self,
        text: &zbus::zvariant::Value<'_>,
        cursor_pos: u32,
        anchor_pos: u32,
    ) -> zbus::Result<()>;

    /// CommitText signal
    #[zbus(signal)]
    fn commit_text(&self, text: zbus::zvariant::Value<'_>) -> zbus::Result<()>;

    /// CursorDownLookupTable signal
    #[zbus(signal)]
    fn cursor_down_lookup_table(&self) -> zbus::Result<()>;

    /// CursorUpLookupTable signal
    #[zbus(signal)]
    fn cursor_up_lookup_table(&self) -> zbus::Result<()>;

    /// ForwardKeyEvent signal
    #[zbus(signal)]
    fn forward_key_event(&self, keyval: u32, keycode: u32, state: u32) -> zbus::Result<()>;

    /// HideAuxiliaryText signal
    #[zbus(signal)]
    fn hide_auxiliary_text(&self) -> zbus::Result<()>;

    /// HideLookupTable signal
    #[zbus(signal)]
    fn hide_lookup_table(&self) -> zbus::Result<()>;

    /// HidePreeditText signal
    #[zbus(signal)]
    fn hide_preedit_text(&self) -> zbus::Result<()>;

    /// PageDownLookupTable signal
    #[zbus(signal)]
    fn page_down_lookup_table(&self) -> zbus::Result<()>;

    /// PageUpLookupTable signal
    #[zbus(signal)]
    fn page_up_lookup_table(&self) -> zbus::Result<()>;

    /// RegisterProperties signal
    #[zbus(signal)]
    fn register_properties(&self, props: zbus::zvariant::Value<'_>) -> zbus::Result<()>;

    /// ShowAuxiliaryText signal
    #[zbus(signal)]
    fn show_auxiliary_text(&self) -> zbus::Result<()>;

    /// ShowLookupTable signal
    #[zbus(signal)]
    fn show_lookup_table(&self) -> zbus::Result<()>;

    /// ShowPreeditText signal
    #[zbus(signal)]
    fn show_preedit_text(&self) -> zbus::Result<()>;

    /// UpdateAuxiliaryText signal
    #[zbus(signal)]
    fn update_auxiliary_text(
        &self,
        text: zbus::zvariant::Value<'_>,
        visible: bool,
    ) -> zbus::Result<()>;

    /// UpdateLookupTable signal
    #[zbus(signal)]
    fn update_lookup_table(
        &self,
        table: zbus::zvariant::Value<'_>,
        visible: bool,
    ) -> zbus::Result<()>;

    /// UpdatePreeditText signal
    #[zbus(signal)]
    fn update_preedit_text(
        &self,
        text: zbus::zvariant::Value<'_>,
        cursor_pos: u32,
        visible: bool,
    ) -> zbus::Result<()>;

    /// UpdatePreeditTextWithMode signal
    #[zbus(signal)]
    fn update_preedit_text_with_mode(
        &self,
        text: zbus::zvariant::Value<'_>,
        cursor_pos: u32,
        visible: bool,
        mode: u32,
    ) -> zbus::Result<()>;

    /// UpdateProperty signal
    #[zbus(signal)]
    fn update_property(&self, prop: zbus::zvariant::Value<'_>) -> zbus::Result<()>;

    /* /// ClientCommitPreedit property
    #[zbus(property)]
    fn set_client_commit_preedit(&self, value: &(bool,)) -> zbus::Result<()>;

    /// ContentType property
    #[zbus(property)]
    fn set_content_type(&self, value: &(u32, u32)) -> zbus::Result<()>; */
}
