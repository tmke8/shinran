<?xml version="1.0"?>
<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
  <interface name='org.freedesktop.IBus.Engine'>
    <!-- methods -->
    <method name='ProcessKeyEvent'>
      <arg direction='in'  type='u' name='keyval' />
      <arg direction='in'  type='u' name='keycode' />
      <arg direction='in'  type='u' name='state' />
      <arg direction='out' type='b' />
    </method>

    <!--
     * IBusEngine::set-cursor-location:
     * @engine: An IBusEngine.
     * @x: X coordinate of the cursor.
     * @y: Y coordinate of the cursor.
     * @w: Width of the cursor.
     * @h: Height of the cursor.
     *
     * Emitted when the location of IME is set.
     * Implement the member function IBusEngineClass::set_cursor_location
     * in extended class to receive this signal.
     *
     * See also:  ibus_input_context_set_cursor_location().
     * <note><para>Argument @user_data is ignored in this function.</para>
     * </note>
    -->
    <method name='SetCursorLocation'>
      <arg direction='in'  type='i' name='x' />
      <arg direction='in'  type='i' name='y' />
      <arg direction='in'  type='i' name='w' />
      <arg direction='in'  type='i' name='h' />
    </method>
    <method name='ProcessHandWritingEvent'>
      <arg direction='in'  type='ad' name='coordinates' />
    </method>
    <method name='CancelHandWriting'>
      <arg direction='in'  type='u' name='n_strokes' />
    </method>

    <!--
     * IBusEngine::set-capabilities:
     * @engine: An IBusEngine.
     * @caps: Capabilities flags of IBusEngine, see #IBusCapabilite
     *
     * Emitted when the client application capabilities is set.
     * Implement the member function IBusEngineClass::set_capabilities
     * in extended class to receive this signal.
     *
     * See also:  ibus_input_context_set_capabilities().
     * <note><para>Argument @user_data is ignored in this function.</para>
     * </note>
    -->
    <method name='SetCapabilities'>
      <arg direction='in'  type='u' name='caps' />
    </method>
    <method name='PropertyActivate'>
      <arg direction='in'  type='s' name='name' />
      <arg direction='in'  type='u' name='state' />
    </method>
    <method name='PropertyShow'>
      <arg direction='in'  type='s' name='name' />
    </method>
    <method name='PropertyHide'>
      <arg direction='in'  type='s' name='name' />
    </method>

    <!--
     * IBusEngine::candidate-clicked:
     * @engine: An IBusEngine.
     * @index:  Index of candidate be clicked.
     * @button: Mouse button.
     * @state:  Keyboard state.
     *
     * Emitted when candidate on lookup table is clicked.
     * Implement the member function IBusEngineClass::candidate_clicked
     * in extended class to receive this signal.
     *
     * <note><para>Argument @user_data is ignored in this function.</para>
     * </note>
    -->
    <method name='CandidateClicked'>
      <arg direction='in'  type='u' name='index' />
      <arg direction='in'  type='u' name='button' />
      <arg direction='in'  type='u' name='state' />
    </method>
    <method name='FocusIn' />

    <!--
     * IBusEngine::focus-in-id:
     * @engine: An IBusEngine.
     * @object_path: An object path.
     * @client: An client name.
     *
     * Emitted when the client application get the focus.
     * Implement the member function IBusEngineClass::focus_in
     * in extended class to receive this signal.
     * @object_path is a unique id by input context.
     * @client indicates a client type:
     * 'fake':    focus is on desktop background or other programs where no
     *            input is possible
     * 'xim':     old X11 programs like xterm, emacs, ...
     *            GTK3 programs in a Gnome Xorg session when GTK_IM_MODULE
     *            is unset also use xim
     * 'gtk-im:&lt;client-name&gt;':  Gtk2 input module is used
     * 'gtk3-im:&lt;client-name&gt;': Gtk3 input module is used
     * 'gtk4-im:&lt;client-name&gt;': Gtk4 input module is used
     *            In case of the Gtk input modules, the name of the
     *            client is also shown after the “:”, for example
     *            like 'gtk3-im:firefox', 'gtk4-im:gnome-text-editor', …
     * 'gnome-shell': Entries handled by gnome-shell
     *                (like the command line dialog opened with Alt+F2
     *                or the search field when pressing the Super key.)
     *                When GTK_IM_MODULE is unset in a Gnome Wayland session
     *                all programs which would show 'gtk3-im' or 'gtk4-im'
     *                with GTK_IM_MODULE=ibus then show 'gnome-shell'
     *                instead.
     * 'Qt':      Qt4 programs like keepassx-2.0.3 …
     * 'QIBusInputContext': Qt5 programs like keepassxc-2.7.1, anki-2.1.15
     *                      telegram-desktop-3.7.3, 
     *
     * You need to set #IBusEngine::has-focus-id property to %TRUE when you
     * construct an #IBusEngine to use this class method.
     *
     * See also: ibus_input_context_focus_in()
     * <note><para>Argument @user_data is ignored in this function.</para>
     * </note>
    -->
    <method name='FocusInId'>
      <arg direction='in'  type='s' name='object_path' />
      <arg direction='in'  type='s' name='client' />
    </method>
    <method name='FocusIn' />
    <method name='FocusOut' />
    <method name='FocusOutId'>
      <arg direction='in'  type='s' name='object_path' />
    </method>
    <method name='Reset' />
    <method name='Enable' />
    <method name='Disable' />
    <method name='PageUp' />
    <method name='PageDown' />
    <method name='CursorUp' />
    <method name='CursorDown' />
    <method name='SetSurroundingText'>
      <arg direction='in'  type='v' name='text' />
      <arg direction='in'  type='u' name='cursor_pos' />
      <arg direction='in'  type='u' name='anchor_pos' />
    </method>
    <method name='PanelExtensionReceived'>
      <arg direction='in'  type='v' name='event' />
    </method>
    <method name='PanelExtensionRegisterKeys'>
      <arg direction='in'  type='v' name='data' />
    </method>

    <!-- Signals -->
    <signal name='CommitText'>
      <arg type='v' name='text' />
    </signal>
    <signal name='UpdatePreeditText'>
      <arg type='v' name='text' />
      <arg type='u' name='cursor_pos' />
      <arg type='b' name='visible' />
      <arg type='u' name='mode' />
    </signal>
    <signal name='UpdateAuxiliaryText'>
      <arg type='v' name='text' />
      <arg type='b' name='visible' />
    </signal>

    <!--
     * ibus_engine_update_lookup_table:
     * @engine: An IBusEngine.
     * @lookup_table: An lookup_table.
     * @visible: Whether the lookup_table is visible.
     *
     * Update the lookup table.
     *
     * (Note: The table object will be released, if it is floating.
     *  If caller want to keep the object, caller should make the object
     *  sink by g_object_ref_sink.)
    -->
    <signal name='UpdateLookupTable'>
      <arg type='v' name='table' />
      <arg type='b' name='visible' />
    </signal>
    <signal name='RegisterProperties'>
      <arg type='v' name='props' />
    </signal>
    <signal name='UpdateProperty'>
      <arg type='v' name='prop' />
    </signal>
    <signal name='ForwardKeyEvent'>
      <arg type='u' name='keyval' />
      <arg type='u' name='keycode' />
      <arg type='u' name='state' />
    </signal>
    <signal name='PanelExtension'>
      <arg type='v' name='data' />
    </signal>

    <!-- Properties -->
    <property name='ContentType' type='(uu)' access='write' />
    <property name='FocusId' type='(b)' access='read' />

    <!--
     * IBusEngine:active-surrounding-text:
     *
     * When this property is set to %TRUE, "RequireSurroundingText" D-Bus
     * signal will be called by ibus-daemon on every focus-in/out event, with
     * no need for the engine to call ibus_engine_get_surrounding_text().
     * This property can only be set at construct time.
    -->
    <property name='ActiveSurroundingText' type='(b)' access='read' />
  </interface>
</node>

